import java.util.Stack;

public class khudequi {
public static void doihe(int n,int k) {
	Stack <Integer> s= new Stack<Integer>();
		while(n>0) {
			s.push(n%10);
			n=n/k;
		}
		while(s.isEmpty()==false) {
		System.out.println(s.peek()<10 ? s.pop():(char)(s.pop()+55));
		}
	}
public static long factorical(int n){
	Stack<Integer> s= new Stack<Integer>();
	int sum=1;
	while(n>0) {
		s.push(n);
		n=n-1;
	}
	while(s.isEmpty()==false) {
		sum=sum*s.pop();
	}
	return sum;
	}
public static long sum(int n) {
	Stack<Integer> s= new Stack<Integer>();
	int sum=0;
	while(n>0) {
		s.push(n);
		n=n-1;
	}
	while(s.isEmpty()==false) {
	 sum=sum+s.pop();
	 }
	return sum;
}
public static long sum2(int n) {
	Stack<Integer> s= new Stack<Integer>();
		n=n%2==0?n=n-1:1;
		int sum2=0;
	while(n>0) {
		s.push(n);
		n=n-2;
	}
	while(s.isEmpty()==false) {
		sum2=sum2+s.pop();
	}
	return sum2;
}
	public static long daonguoc(int n) {
		Stack<Integer> s= new Stack<Integer>();
		int t=0;
		while(n>0)
		{
			s.push(n%10);
			n=n/10;
			}
		while(s.isEmpty()==false) {
			t=t*10+s.pop();
		}
		return t;
	}
	public static long mod(int a, int b) {
		Stack<Integer> s= new Stack<Integer>();
		if(a==0||b==0)
			return 0;
		while(a>=b) {
			s.push(a=a-b);
		}
		return a;
	}
	public static long  div(int a, int b) {
		Stack<Integer> s= new Stack<Integer>();
		int dem=0;
		while(a>=b) {
			s.push(a=a-b);
			dem++;
		}
		return dem;
	}
	public static void main(String[] args) {
		System.out.println(khudequi.sum(4));
		System.out.println(khudequi.factorical(6));
		System.out.println(khudequi.sum2(10));
		System.out.println(khudequi.daonguoc(123));
		System.out.println(khudequi.mod(5,2));
		System.out.println(khudequi.div(1,2));
	}
}
