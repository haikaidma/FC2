package simply_linked_list;

public class MyLinkedList<E> {
	private class Node
	{
		private E info;
		private Node next;
	
	public Node(E info)
	{
		this.info =info;
		this.next =null;
	}
	
	public Node(E info,Node next)
	{
		this.info=info;
		this.next=null;
	}

	public int info(int i) {
		return 0;
	}
}
	private Node head, tail;
	private int size;
	public MyLinkedList()
	{
		head=tail=null;
		size=0;
	}
	public void addLast(E e) {
		Node p=new Node(e);
		if(size==0)
			head=tail=p;
		else 
		{
			tail.next=p;
			tail=p;
		}
		size++;
	}
	public String toString() {
		String s="";
		Node q=head;
		while (q!=null) {
			s=s+q.info+" ";
			q=q.next;
		}
		return s;
	}
	//tinh tong 
	public int sum() {
		Node q=head;
		int s=0;
		while (q!=null) {
			s=s+(Integer)q.info;
			q=q.next;
		}
		return s;
	}
	public int dem() {
		Node q=head;
		int dem=0;
		while(q!=null) {
			if((Integer)q.info%2==0)
				dem++;
			q=q.next;
		}
		return dem;
	}
	public int Nodelast() {
		int k;
		Node r=tail;
		k=(Integer)r.info;
			return k;
	}
	public void Node2() {
		String s="";
		Node q=head;
		while (q.next!=null) {
			s=s+q.info+" ";
			q=q.next;
		}
		System.out.println(s);
	}
	public boolean SNT(int x) {
		if(x<2) {
			return false;}
		else {
		for (int i=2;i<=Math.sqrt((float)(x));i++) {
			if(x%i==0) 
			{
				return false;
					
				}
			}
		}
	return true;
}
	public void tbc() {
		int d =0,S=0;
		double tbc=0;
		Node q=head;
		while (q!=null) {
			if(SNT((Integer)q.info)==true) {
				S+=(Integer)q.info;
				d++;}
			q=q.next;
		}
		tbc=1.0*S/d;
		System.out.println(tbc);
	}
	//dem trong lien ket co bao nhieu gia tri chan
	//tinh cbc cac so nguyen to
	//in  ra gia tri node cuoi
	//in ra cac gia tri cua nut ke cuoi
	public static void main(String[] args) {
		MyLinkedList h= new MyLinkedList<Integer>();
		h.addLast(3);
		h.addLast(6);
		h.addLast(8);
		h.addLast(9);
		h.addLast(2);
		h.addLast(5);
		h.addLast(10);
		System.out.println(h.toString());
		System.out.println(h.sum());
		System.out.println(h.dem());
		System.out.println(h.Nodelast());
		h.Node2();
		h.tbc();
	}

}
